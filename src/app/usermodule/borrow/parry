import { Component, OnInit } from '@angular/core';
import { AdminBooksService } from 'src/app/adminServices/admin-books.service';
import { IMember } from 'src/app/adminmodule/members/members';
import { UserOwnedService } from 'src/app/userServices/user-owned.service';
import { IBook } from 'src/app/adminmodule/books/books';
import { AdminMembersService } from 'src/app/adminServices/admin-members.service';


@Component({
  selector: 'app-borrow',
  templateUrl: './borrow.component.html',
  styleUrls: ['./borrow.component.css']
})
export class BorrowComponent implements OnInit {

  constructor(private bookSer: AdminBooksService, private userDet: UserOwnedService, private memberSer: AdminMembersService, ) { }
  //myrrrrrrrrr
  reqUser: IMember;
  badge;
  requestedBooks = [];
  userid;
  public books = [];

  ngOnInit() {



    console.log(this.badge)
    this.getbyStatus("Old&bstatus=New&bstatus=Damaged");
    if (sessionStorage) {
      this.userid = sessionStorage.getItem("userid");
      if (this.userid != null) { }
    }
    //myyeerrrrrr
    this.memberSer.getMembyId(this.userid).subscribe(data => this.reqUser = data);

    this.requestedBooks = JSON.parse(this.reqUser.ujson);

    // this.requestedBooks = JSON.parse(localStorage.getItem("user" + this.userid + ""));
    if (this.requestedBooks.length == null) {
      this.badge = 0;
    }
    else {
      this.badge = this.requestedBooks.length;
    }

  }

  getbyStatus(fil: string) {
    console.log(fil);
    this.bookSer.getBookbyStatus(fil)
      .subscribe(data => this.books = data);
  }

  addtoReq(book: IBook) {
    if (book.bcopies > 0) {

      if (this.requestedBooks == null) {
        console.log("Vattayee")

        this.requestedBooks = this.requestedBooks || [];
        this.requestedBooks.push(book);
        localStorage.setItem("user" + this.userid + "", JSON.stringify(this.requestedBooks));

        book.bcopies -= 1;
        this.bookSer.updateBook(book).subscribe();

      }
      else {
        console.log("moonji");
        if (this.requestedBooks.length < 3) {
          this.requestedBooks.push(book);
          localStorage.setItem("user" + this.userid + "", JSON.stringify(this.requestedBooks));


          book.bcopies -= 1;
          this.bookSer.updateBook(book).subscribe();

        } else {
          alert("You can not take more than 3 books...")
        }
      }

      this.badge = this.requestedBooks.length;
    }
    else {
      if (book.bcopies == 0) {
        alert("Book is not available now..")
      }
      else {
        alert("You cant take more than 3 books")
      }
    }
  }

  delfrmReq(borrow) {
    let index = this.requestedBooks.findIndex(obj => obj.btitle == borrow.btitle);
    console.log(index);
    this.requestedBooks.splice(index, 1);
    this.badge = this.requestedBooks.length;
    localStorage.setItem("user" + this.userid + "", JSON.stringify(this.requestedBooks));

    let tempcp;
    this.books.forEach(element => {
      if (borrow.id == element.id) {
        tempcp = element.bcopies;
      }
    });

    console.log(tempcp);
    tempcp += 1;
    borrow.bcopies = tempcp;
    this.bookSer.updateBook(borrow).subscribe();

  }

  delsave() {

    let reqBooks = JSON.parse(localStorage.getItem("user" + this.userid + ""));
    this.reqUser.ujson = JSON.stringify(this.requestedBooks);
    this.memberSer.updateMember(this.reqUser).subscribe();

  }

}
